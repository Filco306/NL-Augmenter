from nltk import edit_distance
from transformers import MarianMTModel, MarianTokenizer

from interfaces.SentenceOperation import SentenceOperation
from tasks.TaskTypes import TaskType
from transformations.multilingual_backtranslation.helpers.supported_languages import (
    SUPPORTED_LANGUAGES,
    check_support,
)

# This codebase is based on the previous backtranslation codebase.
# https://github.com/GEM-benchmark/NL-Augmenter/tree/main/transformations/back_translation


class MultilingualBacktranslation(SentenceOperation):
    tasks = [TaskType.TEXT_CLASSIFICATION, TaskType.TEXT_TO_TEXT_GENERATION]
    languages = SUPPORTED_LANGUAGES
    heavy = True

    """
        Multilingual backtranslation. Supports backtranslation for 232 language codes (201 unique languages) through MarianMT models.

        Args:
            src_lang_code: The ISO-code of the original language
            tgt_lang_code: The ISO-code of the intermediate language
            seed: The seed for the random generator
            max_outputs: The maximum number of outputs to return
            num_beams: The number of beams to use for beam search
            use_larger_model_if_available: If true, a larger, multilingual model is used if available. If false, the smaller model is used if available.
            verbose: If true, prints out the decoded outputs
    """

    def __init__(
        self,
        src_lang_code: str = "en",
        tgt_lang_code: str = "es",
        seed: int = 4,
        max_outputs: int = 1,
        num_beams: int = 4,
        use_larger_model_if_available: bool = True,
        verbose: bool = False,
        sort_by_edit_distance: bool = True,
    ):
        super().__init__(seed, max_outputs=max_outputs)
        self.sort_by_edit_distance = sort_by_edit_distance
        assert max_outputs <= num_beams, "max_outputs must be <= num_beams"

        (
            self.src,
            self.tgt,
            self.src_lang_code,
            self.tgt_lang_code,
        ) = check_support(
            src_lang_code, tgt_lang_code, use_larger_model_if_available
        )
        if verbose:
            print(
                f"Starting to load {src_lang_code} to {tgt_lang_code} Translation Model.\n"
            )
        src_model_name = (
            f"Helsinki-NLP/opus-mt-{self.src_lang_code}-{self.tgt_lang_code}"
        )
        tgt_model_name = (
            f"Helsinki-NLP/opus-mt-{self.tgt_lang_code}-{self.src_lang_code}"
        )
        self.tokenizer_src_tgt = MarianTokenizer.from_pretrained(
            src_model_name
        )
        self.model_src_tgt = MarianMTModel.from_pretrained(src_model_name)

        if self.verbose:
            print(
                f"Completed loading {self.src_lang_code} to {self.tgt_lang_code} Translation Model.\n"
            )
            print(
                f"Starting to load {self.tgt_lang_code} to {self.src_lang_code} Translation Model:"
            )
        # try:
        self.tokenizer_tgt_src = (
            MarianTokenizer.from_pretrained(tgt_model_name)
            if tgt_model_name != src_model_name
            else self.tokenizer_src_tgt
        )
        self.model_tgt_src = (
            MarianMTModel.from_pretrained(tgt_model_name)
            if tgt_model_name != src_model_name
            else self.model_src_tgt
        )
        self.num_beams = num_beams
        if self.verbose:
            print("Completed loading German to English Translation Model.\n")

    def back_translate(self, src_sentence: str):
        src_sentence = (
            self.tgt + src_sentence if self.tgt is not None else src_sentence
        )
        intermediate = self.src2tgt(src_sentence)
        intermediate = [
            self.src + x if self.src is not None else x for x in intermediate
        ]
        en_new = [
            self.tgt2src(intermediate[i]) for i in range(len(intermediate))
        ]
        return en_new

    def src2tgt(self, input):
        input_ids = self.tokenizer_src_tgt.encode(input, return_tensors="pt")
        outputs = self.model_src_tgt.generate(
            input_ids, num_return_sequences=3, num_beams=5
        )
        decoded = [
            self.tokenizer_src_tgt.decode(outputs[i], skip_special_tokens=True)
            for i in range(len(outputs))
        ]
        if self.verbose:
            print(decoded)  # Maschinelles Lernen ist groÃŸartig, oder?
        return decoded

    def tgt2src(self, input):
        input_ids = self.tokenizer_tgt_src.encode(input, return_tensors="pt")
        outputs = self.model_tgt_src.generate(
            input_ids,
            num_return_sequences=self.max_outputs,
            num_beams=self.num_beams,
        )
        predicted_outputs = []
        for output in outputs:
            decoded = self.tokenizer_tgt_src.decode(
                output, skip_special_tokens=True
            )
            # TODO: this should be able to return multiple sequences
            predicted_outputs.append(decoded)
        if self.verbose:
            print(predicted_outputs)  # Machine learning is great, isn't it?
        return predicted_outputs

    def generate(self, sentence: str):

        perturbs = self.back_translate(sentence)
        out = [x[0] for x in perturbs if x[0] != sentence]
        if self.sort_by_edit_distance:
            out = sorted(out, key=lambda x: edit_distance(x, sentence))
        return out[: self.max_outputs]


if __name__ == "__main__":
    backtranslator = MultilingualBacktranslation()
    # sentence = "Yo soy un estudiante y trabajo en la cafeteria al lado del mercado. "
    sentence = "Neuroplasticity is a continuous processing allowing short-term, medium-term, and long-term remodeling of the neuronosynaptic organization."
    out = backtranslator.generate(sentence)
    print(out)


SUPPORTED_LANGUAGE_PAIRS = [
    ("es", "et"),
    ("lt", "pl"),
    ("csg", "es"),
    ("ar", "es"),
    ("crs", "fr"),
    ("ee", "sv"),
    ("de", "he"),
    ("fr", "tw"),
    ("es", "mt"),
    ("fi", "iso"),
    ("ee", "fi"),
    ("pis", "sv"),
    ("bg", "ru"),
    ("de", "eu"),
    ("en", "nso"),
    ("fi", "he"),
    ("en", "tiv"),
    ("en", "ur"),
    ("cus", "en"),
    ("af", "nl"),
    ("ca", "uk"),
    ("aav", "en"),
    ("eo", "fi"),
    ("de", "ln"),
    ("en", "to"),
    ("it", "uk"),
    ("it", "vi"),
    ("en", "pag"),
    ("sv", "tll"),
    ("en", "tn"),
    ("cpf", "en"),
    ("bi", "fr"),
    ("ru", "sl"),
    ("iso", "sv"),
    ("eo", "pt"),
    ("en", "jap"),
    ("af", "fi"),
    ("en", "lun"),
    ("en", "hy"),
    ("en", "fi"),
    ("en", "lue"),
    ("es", "sn"),
    ("en", "ho"),
    ("fi", "nso"),
    ("fr", "yap"),
    ("en", "xh"),
    ("es", "hr"),
    ("fr", "swc"),
    ("en", "sn"),
    ("es", "fi"),
    ("fr", "tn"),
    ("fr", "guw"),
    ("fr", "ht"),
    ("fr", "zne"),
    ("fr", "sg"),
    ("es", "swc"),
    ("fi", "guw"),
    ("en", "sm"),
    ("fi", "ht"),
    ("fr", "ig"),
    ("de", "fr"),
    ("eo", "es"),
    ("hy", "ru"),
    ("es", "nso"),
    ("en", "ga"),
    ("da", "de"),
    ("fr", "pap"),
    ("kwy", "sv"),
    ("sv", "yo"),
    ("ase", "de"),
    ("bem", "fi"),
    ("ar", "ru"),
    ("chk", "en"),
    ("sl", "sv"),
    ("lv", "sv"),
    ("dra", "en"),
    ("en", "mt"),
    ("es", "rw"),
    ("de", "ee"),
    ("ro", "sv"),
    ("efi", "fi"),
    ("de", "ms"),
    ("fi", "mk"),
    ("sv", "tum"),
    ("es", "eu"),
    ("fr", "to"),
    ("de", "it"),
    ("fr", "tum"),
    ("sh", "uk"),
    ("fr", "niu"),
    ("en", "lg"),
    ("en", "ml"),
    ("ar", "tr"),
    ("en", "eo"),
    ("en", "kwy"),
    ("en", "run"),
    ("en", "nl"),
    ("en", "lu"),
    ("de", "hu"),
    ("bg", "fr"),
    ("fi", "sg"),
    ("fr", "loz"),
    ("eo", "sv"),
    ("fi", "pag"),
    ("cs", "fi"),
    ("en", "tll"),
    ("bzs", "es"),
    ("es", "yo"),
    ("fr", "rw"),
    ("bem", "fr"),
    ("efi", "sv"),
    ("ha", "sv"),
    ("fr", "pon"),
    ("eo", "he"),
    ("bcl", "fr"),
    ("fi", "no"),
    ("fr", "kwy"),
    ("en", "zlw"),
    ("es", "tvl"),
    ("crs", "fi"),
    ("ee", "fr"),
    ("sv", "tw"),
    ("es", "guw"),
    ("es", "ht"),
    ("en", "sv"),
    ("es", "lus"),
    ("fi", "war"),
    ("en", "kj"),
    ("bcl", "de"),
    ("en", "grk"),
    ("en", "umb"),
    ("es", "nl"),
    ("fr", "tvl"),
    ("cs", "sv"),
    ("ca", "it"),
    ("it", "ms"),
    ("ru", "sv"),
    ("nl", "sv"),
    ("sv", "xh"),
    ("bcl", "es"),
    ("en", "gaa"),
    ("en", "nic"),
    ("ca", "nl"),
    ("he", "ru"),
    ("cs", "uk"),
    ("sk", "sv"),
    ("sv", "tpi"),
    ("fr", "he"),
    ("hu", "sv"),
    ("de", "lt"),
    ("fi", "lu"),
    ("fi", "ts"),
    ("fi", "ilo"),
    ("fi", "ru"),
    ("es", "ilo"),
    ("fr", "tll"),
    ("ase", "fr"),
    ("en", "pqe"),
    ("et", "sv"),
    ("bi", "sv"),
    ("en", "ha"),
    ("en", "ny"),
    ("fi", "pon"),
    ("en", "kg"),
    ("kqn", "sv"),
    ("en", "pon"),
    ("ase", "sv"),
    ("de", "pag"),
    ("ber", "en"),
    ("en", "pap"),
    ("da", "es"),
    ("af", "en"),
    ("eo", "pl"),
    ("es", "niu"),
    ("az", "tr"),
    ("fr", "mt"),
    ("es", "sm"),
    ("pt", "tl"),
    ("afa", "en"),
    ("es", "tll"),
    ("lt", "tr"),
    ("en", "ng"),
    ("fi", "zne"),
    ("en", "itc"),
    ("fi", "st"),
    ("de", "fi"),
    ("fi", "yo"),
    ("fi", "mh"),
    ("gl", "pt"),
    ("el", "fr"),
    ("fi", "ha"),
    ("ceb", "fi"),
    ("fr", "ms"),
    ("sv", "yap"),
    ("en", "tl"),
    ("is", "sv"),
    ("es", "vi"),
    ("en", "zh"),
    ("en", "zle"),
    ("bzs", "fi"),
    ("fi", "lue"),
    ("fi", "tvl"),
    ("fi", "hu"),
    ("sv", "ts"),
    ("he", "sv"),
    ("fi", "gaa"),
    ("fr", "ts"),
    ("de", "guw"),
    ("cel", "en"),
    ("es", "ig"),
    ("es", "ve"),
    ("es", "tl"),
    ("bg", "it"),
    ("de", "ig"),
    ("en", "eu"),
    ("es", "st"),
    ("st", "sv"),
    ("sv", "to"),
    ("fi", "sl"),
    ("en", "loz"),
    ("en", "mos"),
    ("csn", "es"),
    ("ar", "el"),
    ("ar", "en"),
    ("az", "en"),
    ("en", "mr"),
    ("en", "lua"),
    ("es", "rn"),
    ("de", "ny"),
    ("bcl", "fi"),
    ("bzs", "fr"),
    ("fr", "ru"),
    ("bcl", "sv"),
    ("eo", "fr"),
    ("cs", "de"),
    ("es", "xh"),
    ("en", "iso"),
    ("fi", "hr"),
    ("fi", "nl"),
    ("fr", "hu"),
    ("en", "phi"),
    ("af", "eo"),
    ("en", "gv"),
    ("en", "sal"),
    ("fr", "gaa"),
    ("sv", "toi"),
    ("en", "fr"),
    ("fi", "toi"),
    ("crs", "sv"),
    ("fr", "xh"),
    ("es", "tw"),
    ("es", "pag"),
    ("de", "vi"),
    ("fi", "swc"),
    ("ar", "fr"),
    ("es", "to"),
    ("da", "eo"),
    ("es", "ru"),
    ("no", "pl"),
    ("fr", "rnd"),
    ("en", "id"),
    ("da", "no"),
    ("rw", "sv"),
    ("en", "mg"),
    ("fi", "niu"),
    ("ceb", "sv"),
    ("es", "pap"),
    ("ca", "de"),
    ("ilo", "sv"),
    ("de", "loz"),
    ("no", "ru"),
    ("es", "ny"),
    ("fi", "pap"),
    ("es", "pl"),
    ("eo", "ro"),
    ("fi", "ty"),
    ("chk", "sv"),
    ("fr", "ro"),
    ("es", "tzo"),
    ("es", "sg"),
    ("fi", "id"),
    ("id", "sv"),
    ("de", "no"),
    ("lt", "ru"),
    ("fi", "ro"),
    ("en", "euq"),
    ("en", "sem"),
    ("de", "eo"),
    ("es", "id"),
    ("en", "ru"),
    ("eo", "sh"),
    ("fr", "hr"),
    ("ase", "es"),
    ("ar", "de"),
    ("et", "fi"),
    ("fr", "pl"),
    ("sn", "sv"),
    ("sv", "zne"),
    ("fr", "lue"),
    ("sv", "swc"),
    ("da", "ru"),
    ("ca", "pt"),
    ("de", "tl"),
    ("en", "iir"),
    ("crs", "en"),
    ("el", "fi"),
    ("bnt", "en"),
    ("fr", "yo"),
    ("fr", "sv"),
    ("es", "gil"),
    ("ru", "uk"),
    ("fr", "lg"),
    ("ru", "vi"),
    ("en", "guw"),
    ("en", "ht"),
    ("alv", "en"),
    ("fr", "sk"),
    ("en", "om"),
    ("eo", "nl"),
    ("en", "gmq"),
    ("fr", "sm"),
    ("rnd", "sv"),
    ("en", "ss"),
    ("es", "uk"),
    ("fi", "sk"),
    ("el", "sv"),
    ("en", "rw"),
    ("sg", "sv"),
    ("pl", "uk"),
    ("en", "uk"),
    ("eo", "hu"),
    ("fi", "lua"),
    ("fi", "uk"),
    ("de", "ilo"),
    ("ar", "pl"),
    ("sv", "tn"),
    ("tr", "uk"),
    ("sv", "war"),
    ("ee", "es"),
    ("fi", "lv"),
    ("bat", "en"),
    ("et", "ru"),
    ("de", "et"),
    ("en", "gil"),
    ("niu", "sv"),
    ("sv", "wls"),
    ("en", "kwn"),
    ("fi", "gil"),
    ("af", "de"),
    ("af", "ru"),
    ("no", "uk"),
    ("de", "gaa"),
    ("fr", "wls"),
    ("lua", "sv"),
    ("en", "sk"),
    ("en", "gl"),
    ("hu", "uk"),
    ("es", "he"),
    ("es", "fr"),
    ("ee", "en"),
    ("fr", "iso"),
    ("en", "ig"),
    ("en", "hi"),
    ("fr", "nso"),
    ("crs", "de"),
    ("aed", "es"),
    ("fi", "hil"),
    ("sv", "ty"),
    ("en", "es"),
    ("sv", "uk"),
    ("en", "ti"),
    ("en", "is"),
    ("en", "mh"),
    ("ceb", "en"),
    ("de", "en"),
    ("el", "eo"),
    ("en", "mfe"),
    ("es", "ty"),
    ("fi", "lg"),
    ("lg", "sv"),
    ("pag", "sv"),
    ("es", "tn"),
    ("bzs", "en"),
    ("en", "fiu"),
    ("cs", "eo"),
    ("en", "kqn"),
    ("nso", "sv"),
    ("en", "ine"),
    ("bcl", "en"),
    ("bem", "sv"),
    ("efi", "fr"),
    ("en", "niu"),
    ("es", "lt"),
    ("es", "lua"),
    ("nl", "no"),
    ("fr", "uk"),
    ("en", "inc"),
    ("en", "pis"),
    ("kg", "sv"),
    ("fr", "sl"),
    ("fi", "mt"),
    ("en", "gem"),
    ("eu", "ru"),
    ("es", "war"),
    ("fi", "lus"),
    ("pon", "sv"),
    ("en", "hil"),
    ("bg", "de"),
    ("bg", "en"),
    ("es", "pon"),
    ("fi", "is"),
    ("hr", "sv"),
    ("en", "swc"),
    ("da", "en"),
    ("es", "ha"),
    ("eo", "ru"),
    ("en", "st"),
    ("fr", "gil"),
    ("es", "is"),
    ("pt", "uk"),
    ("eo", "it"),
    ("en", "ilo"),
    ("ar", "it"),
    ("bi", "es"),
    ("nl", "uk"),
    ("lus", "sv"),
    ("es", "loz"),
    ("bg", "es"),
    ("de", "efi"),
    ("en", "ln"),
    ("sl", "uk"),
    ("fr", "no"),
    ("sv", "tiv"),
    ("es", "mfs"),
    ("fr", "lua"),
    ("bg", "fi"),
    ("en", "vi"),
    ("ceb", "fr"),
    ("es", "ln"),
    ("fr", "lu"),
    ("de", "pl"),
    ("en", "zls"),
    ("en", "sq"),
    ("es", "gl"),
    ("es", "zai"),
    ("fj", "fr"),
    ("fi", "fse"),
    ("en", "rn"),
    ("crs", "es"),
    ("ceb", "es"),
    ("gaa", "sv"),
    ("guw", "sv"),
    ("ht", "sv"),
    ("cpp", "en"),
    ("es", "pis"),
    ("es", "it"),
    ("fr", "kqn"),
    ("fr", "kg"),
    ("ca", "es"),
    ("es", "kg"),
    ("en", "trk"),
    ("fr", "vi"),
    ("af", "fr"),
    ("en", "tvl"),
    ("ber", "fr"),
    ("af", "sv"),
    ("fr", "pis"),
    ("it", "lt"),
    ("en", "tpi"),
    ("en", "rnd"),
    ("es", "srn"),
    ("en", "mul"),
    ("en", "et"),
    ("bem", "en"),
    ("cs", "en"),
    ("bi", "en"),
    ("fi", "tw"),
    ("es", "gaa"),
    ("ca", "en"),
    ("de", "hil"),
    ("efi", "en"),
    ("fr", "ln"),
    ("cy", "en"),
    ("srn", "sv"),
    ("sq", "sv"),
    ("fr", "sn"),
    ("en", "sla"),
    ("bg", "eo"),
    ("en", "gmw"),
    ("es", "no"),
    ("en", "lus"),
    ("af", "es"),
    ("de", "nso"),
    ("he", "uk"),
    ("fi", "tll"),
    ("de", "uk"),
    ("es", "prl"),
    ("en", "sg"),
    ("fr", "ha"),
    ("ar", "he"),
    ("es", "mk"),
    ("de", "es"),
    ("lv", "ru"),
    ("es", "sl"),
    ("run", "sv"),
    ("lu", "sv"),
    ("en", "hu"),
    ("fr", "war"),
    ("bg", "uk"),
    ("en", "luo"),
    ("de", "is"),
    ("ig", "sv"),
    ("is", "it"),
    ("en", "urj"),
    ("en", "mkh"),
    ("fi", "pis"),
    ("bg", "sv"),
    ("en", "it"),
    ("en", "mk"),
    ("en", "nyk"),
    ("fr", "lus"),
    ("fr", "id"),
    ("de", "niu"),
    ("en", "ts"),
    ("en", "toi"),
    ("fi", "sv"),
    ("fr", "ty"),
    ("fr", "srn"),
    ("fr", "st"),
    ("de", "pap"),
    ("bzs", "sv"),
    ("fi", "ig"),
    ("en", "fj"),
    ("gil", "sv"),
    ("ber", "es"),
    ("no", "sv"),
    ("ca", "fr"),
    ("fr", "tiv"),
    ("sv", "tvl"),
    ("mt", "sv"),
    ("lue", "sv"),
    ("es", "iso"),
]
GROUP_MEMBERS = {
    "ZH": [
        "cmn",
        "cn",
        "yue",
        "ze_zh",
        "zh_cn",
        "zh_CN",
        "zh_HK",
        "zh_tw",
        "zh_TW",
        "zh_yue",
        "zhs",
        "zht",
        "zh",
    ],
    "ROMANCE": [
        "fr",
        "fr_BE",
        "fr_CA",
        "fr_FR",
        "wa",
        "frp",
        "oc",
        "ca",
        "rm",
        "lld",
        "fur",
        "lij",
        "lmo",
        "es",
        "es_AR",
        "es_CL",
        "es_CO",
        "es_CR",
        "es_DO",
        "es_EC",
        "es_ES",
        "es_GT",
        "es_HN",
        "es_MX",
        "es_NI",
        "es_PA",
        "es_PE",
        "es_PR",
        "es_SV",
        "es_UY",
        "es_VE",
        "pt",
        "pt_br",
        "pt_BR",
        "pt_PT",
        "gl",
        "lad",
        "an",
        "mwl",
        "it",
        "it_IT",
        "co",
        "nap",
        "scn",
        "vec",
        "sc",
        "ro",
        "la",
    ],
    "NORTH_EU": [
        "de",
        "nl",
        "fy",
        "af",
        "da",
        "fo",
        "is",
        "no",
        "nb",
        "nn",
        "sv",
    ],
    "SCANDINAVIA": ["da", "fo", "is", "no", "nb", "nn", "sv"],
}
